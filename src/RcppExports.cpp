// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// SoftMax
NumericVector SoftMax(const NumericVector& x);
RcppExport SEXP _transformer_SoftMax(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(SoftMax(x));
    return rcpp_result_gen;
END_RCPP
}
// attention
NumericMatrix attention(const NumericMatrix& Q, const NumericMatrix& K, const NumericMatrix& V);
RcppExport SEXP _transformer_attention(SEXP QSEXP, SEXP KSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(attention(Q, K, V));
    return rcpp_result_gen;
END_RCPP
}
// feed_forward
NumericMatrix feed_forward(const NumericMatrix& x, int dff, int d_model);
RcppExport SEXP _transformer_feed_forward(SEXP xSEXP, SEXP dffSEXP, SEXP d_modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type dff(dffSEXP);
    Rcpp::traits::input_parameter< int >::type d_model(d_modelSEXP);
    rcpp_result_gen = Rcpp::wrap(feed_forward(x, dff, d_model));
    return rcpp_result_gen;
END_RCPP
}
// fill_mat_rnorm
void fill_mat_rnorm(NumericMatrix& mat);
RcppExport SEXP _transformer_fill_mat_rnorm(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type mat(matSEXP);
    fill_mat_rnorm(mat);
    return R_NilValue;
END_RCPP
}
// fill_mat_row
NumericMatrix fill_mat_row(int nb_Row, const NumericVector row_Vec);
RcppExport SEXP _transformer_fill_mat_row(SEXP nb_RowSEXP, SEXP row_VecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nb_Row(nb_RowSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type row_Vec(row_VecSEXP);
    rcpp_result_gen = Rcpp::wrap(fill_mat_row(nb_Row, row_Vec));
    return rcpp_result_gen;
END_RCPP
}
// insert_sub_mat
void insert_sub_mat(NumericMatrix& mat, const NumericMatrix& sub_Mat, const IntegerVector& col_Index);
RcppExport SEXP _transformer_insert_sub_mat(SEXP matSEXP, SEXP sub_MatSEXP, SEXP col_IndexSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type sub_Mat(sub_MatSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type col_Index(col_IndexSEXP);
    insert_sub_mat(mat, sub_Mat, col_Index);
    return R_NilValue;
END_RCPP
}
// layer_norm
NumericMatrix layer_norm(const NumericMatrix& x, double epsilon);
RcppExport SEXP _transformer_layer_norm(SEXP xSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(layer_norm(x, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// mat_mult
NumericMatrix mat_mult(const NumericMatrix& mat1, const NumericMatrix& mat2);
RcppExport SEXP _transformer_mat_mult(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(mat_mult(mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}
// mat_sum
NumericMatrix mat_sum(const NumericMatrix& mat1, const NumericMatrix& mat2);
RcppExport SEXP _transformer_mat_sum(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(mat_sum(mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}
// multi_head
NumericMatrix multi_head(const NumericMatrix& Q, const NumericMatrix& K, const NumericMatrix& V, int d_model, int num_heads);
RcppExport SEXP _transformer_multi_head(SEXP QSEXP, SEXP KSEXP, SEXP VSEXP, SEXP d_modelSEXP, SEXP num_headsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type d_model(d_modelSEXP);
    Rcpp::traits::input_parameter< int >::type num_heads(num_headsSEXP);
    rcpp_result_gen = Rcpp::wrap(multi_head(Q, K, V, d_model, num_heads));
    return rcpp_result_gen;
END_RCPP
}
// pmax_mat
NumericMatrix pmax_mat(const NumericMatrix& mat);
RcppExport SEXP _transformer_pmax_mat(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(pmax_mat(mat));
    return rcpp_result_gen;
END_RCPP
}
// row_max
NumericVector row_max(const NumericMatrix& mat);
RcppExport SEXP _transformer_row_max(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(row_max(mat));
    return rcpp_result_gen;
END_RCPP
}
// row_means
NumericVector row_means(const NumericMatrix& mat);
RcppExport SEXP _transformer_row_means(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(row_means(mat));
    return rcpp_result_gen;
END_RCPP
}
// row_vars
NumericVector row_vars(const NumericMatrix& mat);
RcppExport SEXP _transformer_row_vars(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(row_vars(mat));
    return rcpp_result_gen;
END_RCPP
}
// sub_mat
NumericMatrix sub_mat(const NumericMatrix& mat, const IntegerVector& col_Index);
RcppExport SEXP _transformer_sub_mat(SEXP matSEXP, SEXP col_IndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type col_Index(col_IndexSEXP);
    rcpp_result_gen = Rcpp::wrap(sub_mat(mat, col_Index));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_transformer_SoftMax", (DL_FUNC) &_transformer_SoftMax, 1},
    {"_transformer_attention", (DL_FUNC) &_transformer_attention, 3},
    {"_transformer_feed_forward", (DL_FUNC) &_transformer_feed_forward, 3},
    {"_transformer_fill_mat_rnorm", (DL_FUNC) &_transformer_fill_mat_rnorm, 1},
    {"_transformer_fill_mat_row", (DL_FUNC) &_transformer_fill_mat_row, 2},
    {"_transformer_insert_sub_mat", (DL_FUNC) &_transformer_insert_sub_mat, 3},
    {"_transformer_layer_norm", (DL_FUNC) &_transformer_layer_norm, 2},
    {"_transformer_mat_mult", (DL_FUNC) &_transformer_mat_mult, 2},
    {"_transformer_mat_sum", (DL_FUNC) &_transformer_mat_sum, 2},
    {"_transformer_multi_head", (DL_FUNC) &_transformer_multi_head, 5},
    {"_transformer_pmax_mat", (DL_FUNC) &_transformer_pmax_mat, 1},
    {"_transformer_row_max", (DL_FUNC) &_transformer_row_max, 1},
    {"_transformer_row_means", (DL_FUNC) &_transformer_row_means, 1},
    {"_transformer_row_vars", (DL_FUNC) &_transformer_row_vars, 1},
    {"_transformer_sub_mat", (DL_FUNC) &_transformer_sub_mat, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_transformer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
